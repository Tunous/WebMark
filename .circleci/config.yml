version: 2

references:

  ## Cache

  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}-{{ checksum "libraries/database/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  ## Workspace

  workspace: &workspace
    ~/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace

  ## Keys

  # Google Cloud Service

  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decoding Google Cloud credentials
      command: echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/gcloud-service-key.json

  ## Docker image configurations

  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
  github_config: &github_config
    working_directory: *workspace
    docker:
      - image: circleci/golang:1.8

jobs:

  build_debug:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Downloading dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - run:
          name: Building debug apk
          command: ./gradlew -PciBuild=true :app:assembleDebug :app:assembleAndroidTest
      - persist_to_workspace:
          root: *workspace
          paths:
            - app/build/outputs/apk
            - .circleci/gcloud_config.yml
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/

  build_release:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Downloading dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - run:
          name: Building release apk
          command: ./gradlew -PciBuild=true :app:assembleRelease
      - persist_to_workspace:
          root: *workspace
          paths:
            - app/build/outputs/apk
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/
      - store_artifacts:
          path: app/build/outputs/mapping/
          destination: /mapping/

  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Downloading dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - run:
          name: Running unit tests
          command: ./gradlew -PciBuild=true testDebugUnitTest
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  test_instrumented:
    <<: *android_config
    steps:
      - *attach_workspace
      - *decode_gcloud_key
      - run:
          name: Setting Google Cloud target project
          command: gcloud config set project webmark-5bbf6
      - run:
          name: Authenticating with Google Cloud
          command: gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
      - run:
          name: Running instrumented tests on Firebase Test Lab
          command: gcloud firebase test android run .circleci/gcloud_config.yml:instrumentation-tests
      - run:
          name: Storing instrumented test results from Firebase Test Lab
          command: |
            mkdir -p ${HOME}/workspace/firebase/
            gsutil -m cp -r -U "`gsutil ls gs://test-lab-qdmua4iszy7tc-mpbqc3mvmnhtk | tail -1`*" ${HOME}/workspace/firebase/
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  deploy_debug_to_github:
    <<: *github_config
    steps:
      - *attach_workspace
      - run:
          name: Downloading GitHub releases tool
          command: go get github.com/tcnksm/ghr
      - run:
          name: Publishing Pre-Release on Github
          command: |
            APK="WebMark-debug.apk"
            cp app/build/outputs/apk/debug/app-debug.apk ${APK}
            ghr -t ${GITHUB_TOKEN} \
                -u ${CIRCLE_PROJECT_USERNAME} \
                -r ${CIRCLE_PROJECT_REPONAME} \
                -c ${CIRCLE_SHA1} \
                -n "Continuous build" \
                -b "[CircleCI build log](https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID)" \
                -recreate \
                -prerelease \
                continuous ${APK}

workflows:
  version: 2
  workflow:
    jobs:
      - build_debug
#      - build_release
      - test_unit
      - test_instrumented:
          requires:
            - build_debug
      - deploy_debug_to_github:
          filters:
            branches:
              only:
                - master
          requires:
            - build_debug
            - test_unit
            - test_instrumented
